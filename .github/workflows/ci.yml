name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install dependencies (Ubuntu)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev pkg-config
        
    - name: Install dependencies (macOS)
      if: matrix.target == 'x86_64-apple-darwin'
      run: |
        brew install openssl pkg-config
        
    - name: Run tests (compiler)
      run: |
        cd packages/compiler
        cargo test --verbose --target ${{ matrix.target }}
        
    - name: Run tests (CLI)
      run: |
        cd packages/cli
        cargo test --verbose --target ${{ matrix.target }}
        
    - name: Run tests (language-server)
      run: |
        cd packages/language-server
        cargo test --verbose --target ${{ matrix.target }}
        
    - name: Run integration tests
      run: |
        cargo test --verbose --target ${{ matrix.target }} --test integration

  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true
        
    - name: Run clippy
      run: |
        cargo clippy --all-targets --all-features -- -D warnings
        
    - name: Check formatting
      run: |
        cargo fmt --all -- --check

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit

  build:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: [test, lint, security]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target:
          ubuntu-latest: x86_64-unknown-linux-gnu
          windows-latest: x86_64-pc-windows-msvc
          macos-latest: x86_64-apple-darwin
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        
    - name: Build compiler
      run: |
        cd packages/compiler
        cargo build --release --target ${{ matrix.target }}
        
    - name: Build CLI
      run: |
        cd packages/cli
        cargo build --release --target ${{ matrix.target }}
        
    - name: Build language-server
      run: |
        cd packages/language-server
        cargo build --release --target ${{ matrix.target }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cortex-${{ matrix.target }}
        path: |
          packages/compiler/target/${{ matrix.target }}/release/cortexc*
          packages/cli/target/${{ matrix.target }}/release/cortex*
          packages/language-server/target/${{ matrix.target }}/release/cortex-lsp*

  vscode-extension:
    name: VSCode Extension
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd packages/vscode-extension
        npm ci
        
    - name: Build extension
      run: |
        cd packages/vscode-extension
        npm run compile
        
    - name: Package extension
      run: |
        cd packages/vscode-extension
        npm run package
        
    - name: Upload extension
      uses: actions/upload-artifact@v3
      with:
        name: cortex-vscode-extension
        path: packages/vscode-extension/*.vsix

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Run benchmarks
      run: |
        cd packages/compiler
        cargo bench --verbose
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: packages/compiler/target/criterion/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, vscode-extension]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      
    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Copy binaries for each platform
        cp cortex-x86_64-unknown-linux-gnu/* release-assets/
        cp cortex-x86_64-pc-windows-msvc/* release-assets/
        cp cortex-x86_64-apple-darwin/* release-assets/
        
        # Copy VSCode extension
        cp cortex-vscode-extension/*.vsix release-assets/
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release-assets/
        asset_name: cortex-${{ github.event.release.tag_name }}
        asset_content_type: application/zip