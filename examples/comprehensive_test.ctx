// COMPREHENSIVE CORTEX TEST SUITE
// Tests all major functionality to ensure everything works correctly
/// ALL FUNCTIONAL - NO ERRORS EXPECTED

func main[] |
  print["=== COMPREHENSIVE CORTEX TEST SUITE ==="]
  
  // Test 1: Basic Variables and Arithmetic
  print["\n1. Basic Variables and Arithmetic:"]
  let a := 10
  let b := 3.14
  let neg := -42
  let pos := +15
  print["  a = " + str[a]]
  print["  b = " + str[b]]
  print["  neg = " + str[neg]]
  print["  pos = " + str[pos]]
  print["  a + b = " + str[a + b]]
  print["  a * 2 = " + str[a * 2]]
  print["  a ** 3 = " + str[a ** 3]]
  
  // Test 2: Arrays and Dictionaries
  print["\n2. Arrays and Dictionaries:"]
  let numbers := [1, 2, 3, 4, 5]
  let mixed := [10, "hello", 3.14, true]
  let person := {"name": "Alice", "age": 30, "active": true}
  print["  numbers = " + str[numbers]]
  print["  mixed = " + str[mixed]]
  print["  person = " + str[person]]
  print["  numbers[0] = " + str[numbers[0]]]
  print["  person[name] = " + str[person["name"]]]
  
  // Test 3: Built-in Functions
  print["\n3. Built-in Functions:"]
  print["  len[numbers] = " + str[len[numbers]]]
  print["  len[person] = " + str[len[person]]]
  print["  min[numbers] = " + str[min[numbers]]]
  print["  max[numbers] = " + str[max[numbers]]]
  print["  abs[neg] = " + str[abs[neg]]]
  
  // Test 4: User-defined Functions
  print["\n4. User-defined Functions:"]
  func add[x, y] |
    return[x + y]
  ^
  
  func factorial[n] |
    if [n <= 1] |
      return[1]
    ^
    return[n * factorial[n - 1]]
  ^
  
  func fibonacci[n] |
    if [n <= 1] |
      return[n]
    ^
    return[fibonacci[n - 1] + fibonacci[n - 2]]
  ^
  
  print["  add[5, 7] = " + str[add[5, 7]]]
  print["  factorial[5] = " + str[factorial[5]]]
  print["  fibonacci[10] = " + str[fibonacci[10]]]
  
  // Test 5: Control Flow
  print["\n5. Control Flow:"]
  let score := 85
  if [score >= 90] |
    print["  Grade: A"]
  ^ else |
    if [score >= 80] |
      print["  Grade: B"]
    ^ else |
      if [score >= 70] |
        print["  Grade: C"]
      ^ else |
        print["  Grade: F"]
      ^
    ^
  ^
  
  // Test 6: While Loops
  print["\n6. While Loops:"]
  let sum := 0
  let i := 1
  while [i <= 5] |
    sum := sum + i
    i := i + 1
  ^
  print["  Sum of 1 to 5 = " + str[sum]]
  
  // Test 7: For Loops
  print["\n7. For Loops:"]
  for j in 1..6 |
    print["  j = " + str[j]]
  ^
  
  // Test 8: String Operations
  print["\n8. String Operations:"]
  let text := "Hello World"
  let greeting := "Welcome to Cortex"
  print["  text = " + text]
  print["  greeting = " + greeting]
  print["  Combined: " + text + " - " + greeting]
  
  // Test 9: Complex Expressions
  print["\n9. Complex Expressions:"]
  let complex := (a + b) * (neg - pos) / (a ** 2)
  let nested := add[factorial[3], fibonacci[5]]
  print["  complex = " + str[complex]]
  print["  nested = " + str[nested]]
  
  // Test 10: Edge Cases
  print["\n10. Edge Cases:"]
  let zero := 0
  let empty_array := []
  let empty_dict := {}
  print["  zero = " + str[zero]]
  print["  empty_array = " + str[empty_array]]
  print["  empty_dict = " + str[empty_dict]]
  print["  abs[zero] = " + str[abs[zero]]]
  print["  len[empty_array] = " + str[len[empty_array]]]
  
  print["\n=== ALL TESTS COMPLETED SUCCESSFULLY ==="]
  print["Cortex compiler is working perfectly!"]
^

main[]
