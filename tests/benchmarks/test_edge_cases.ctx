// EDGE CASES TEST
// Tests boundary conditions and edge cases

func main[] |
  print["=== EDGE CASES TEST ==="]
  
  // Empty collections
  print["--- Empty Collections ---"]
  let empty_arr := []
  let empty_dict := {}
  let empty_str := ""
  
  print["Empty array: " + str[empty_arr]]
  print["Empty array length: " + str[len[empty_arr]]]
  print["Empty dict: " + str[empty_dict]]
  print["Empty dict length: " + str[len[empty_dict]]]
  print["Empty string: '" + empty_str + "'"]
  print["Empty string length: " + str[len[empty_str]]]
  
  // Single element collections
  print["\n--- Single Element Collections ---"]
  let single_arr := [42]
  let single_dict := {"key": "value"}
  
  print["Single array: " + str[single_arr]]
  print["Single array length: " + str[len[single_arr]]]
  print["Single array[0]: " + str[single_arr[0]]]
  print["Single dict: " + str[single_dict]]
  print["Single dict length: " + str[len[single_dict]]]
  
  // Zero values
  print["\n--- Zero Values ---"]
  let zero := 0
  let zero_float := 0.0
  let negative_zero := -0
  
  print["Zero: " + str[zero]]
  print["Zero float: " + str[zero_float]]
  print["Negative zero: " + str[negative_zero]]
  print["Zero == 0.0: " + str[zero == zero_float]]
  
  // Negative numbers
  print["\n--- Negative Numbers ---"]
  let neg := -42
  let neg_float := -3.14
  
  print["Negative int: " + str[neg]]
  print["Negative float: " + str[neg_float]]
  print["Abs of negative: " + str[abs[neg]]]
  print["-neg: " + str[-neg]]
  
  // Very small numbers
  print["\n--- Very Small Numbers ---"]
  let small := 0.0001
  let tiny := 1e-10
  
  print["Small: " + str[small]]
  print["Tiny: " + str[tiny]]
  print["Small + tiny: " + str[small + tiny]]
  
  // Very large numbers
  print["\n--- Very Large Numbers ---"]
  let large := 1000000
  let huge := 1e10
  
  print["Large: " + str[large]]
  print["Huge: " + str[huge]]
  print["Large * huge: " + str[large * huge]]
  
  // Division edge cases
  print["\n--- Division Edge Cases ---"]
  print["10 / 1: " + str[10 / 1]]
  print["10 / 10: " + str[10 / 10]]
  print["1 / 2: " + str[1 / 2]]
  print["0 / 5: " + str[0 / 5]]
  
  // Modulo edge cases
  print["\n--- Modulo Edge Cases ---"]
  print["10 % 1: " + str[10 % 1]]
  print["10 % 10: " + str[10 % 10]]
  print["10 % 3: " + str[10 % 3]]
  print["0 % 5: " + str[0 % 5]]
  
  // Power edge cases
  print["\n--- Power Edge Cases ---"]
  print["2 ** 0: " + str[2 ** 0]]
  print["2 ** 1: " + str[2 ** 1]]
  print["1 ** 100: " + str[1 ** 100]]
  print["0 ** 5: " + str[0 ** 5]]
  
  // Boolean edge cases
  print["\n--- Boolean Edge Cases ---"]
  print["true && true: " + str[true && true]]
  print["false || false: " + str[false || false]]
  print["!true: " + str[!true]]
  print["!false: " + str[!false]]
  print["!!true: " + str[!!true]]
  
  // Null handling
  print["\n--- Null Handling ---"]
  let null_val := null
  print["Null value: " + str[null_val]]
  print["Null == null: " + str[null_val == null]]
  print["Null != 0: " + str[null_val != 0]]
  
  // String edge cases
  print["\n--- String Edge Cases ---"]
  let single_char := "a"
  let space := " "
  
  print["Single char: '" + single_char + "'"]
  print["Single char length: " + str[len[single_char]]]
  print["Space: '" + space + "'"]
  print["Space length: " + str[len[space]]]
  
  // Array edge cases
  print["\n--- Array Edge Cases ---"]
  let arr_with_null := [null, null, null]
  let arr_with_zero := [0, 0, 0]
  let arr_same_val := [42, 42, 42]
  
  print["Array with nulls: " + str[arr_with_null]]
  print["Array with zeros: " + str[arr_with_zero]]
  print["Array same value: " + str[arr_same_val]]
  
  // Nested empty collections
  print["\n--- Nested Empty Collections ---"]
  let nested_empty := [[], [], []]
  let nested_empty_dict := {"a": {}, "b": {}}
  
  print["Nested empty arrays: " + str[nested_empty]]
  print["Nested empty dicts: " + str[nested_empty_dict]]
  
  // Deep nesting
  print["\n--- Deep Nesting ---"]
  let deep := [[[[[1]]]]]
  print["Deep nested: " + str[deep]]
  print["Deep access: " + str[deep[0][0][0][0][0]]]
  
  // Factorial edge cases
  func factorial[n] |
    if [n <= 1] |
      return[1]
    ^
    return[n * factorial[n - 1]]
  ^
  
  print["\n--- Factorial Edge Cases ---"]
  print["factorial(0): " + str[factorial[0]]]
  print["factorial(1): " + str[factorial[1]]]
  print["factorial(2): " + str[factorial[2]]]
  
  print["\n=== EDGE CASE TESTS PASSED ==="]
^

main[]