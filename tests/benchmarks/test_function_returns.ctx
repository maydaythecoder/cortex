// FUNCTION RETURN TEST
// Tests function return values and return statement behavior

func main[] |
  print["=== FUNCTION RETURN TEST ==="]
  
  // Simple return
  func return_number[] |
    return[42]
  ^
  
  let result := return_number[]
  print["return_number(): " + str[result]]
  
  // Return with parameters
  func add[a, b] |
    return[a + b]
  ^
  
  print["add(10, 20): " + str[add[10, 20]]]
  print["add(5, 3): " + str[add[5, 3]]]
  
  // Return with expressions
  func square[n] |
    return[n * n]
  ^
  
  print["square(5): " + str[square[5]]]
  print["square(10): " + str[square[10]]]
  
  // Return with multiple operations
  func compute[x, y] |
    let sum := x + y
    let product := x * y
    return[sum * product]
  ^
  
  print["compute(3, 4): " + str[compute[3, 4]]]
  
  // Conditional returns
  func max_two[a, b] |
    if [a > b] |
      return[a]
    ^
    return[b]
  ^
  
  print["max_two(10, 5): " + str[max_two[10, 5]]]
  print["max_two(3, 8): " + str[max_two[3, 8]]]
  
  // Early return
  func check_positive[n] |
    if [n <= 0] |
      return[false]
    ^
    return[true]
  ^
  
  print["check_positive(5): " + str[check_positive[5]]]
  print["check_positive(-3): " + str[check_positive[-3]]]
  
  // Recursive returns
  func factorial[n] |
    if [n <= 1] |
      return[1]
    ^
    return[n * factorial[n - 1]]
  ^
  
  print["factorial(5): " + str[factorial[5]]]
  print["factorial(0): " + str[factorial[0]]]
  print["factorial(7): " + str[factorial[7]]]
  
  // Fibonacci with returns
  func fibonacci[n] |
    if [n <= 1] |
      return[n]
    ^
    return[fibonacci[n - 1] + fibonacci[n - 2]]
  ^
  
  print["fibonacci(6): " + str[fibonacci[6]]]
  print["fibonacci(8): " + str[fibonacci[8]]]
  
  // Nested function calls with returns
  func double[n] |
    return[n * 2]
  ^
  
  func quadruple[n] |
    return[double[double[n]]]
  ^
  
  print["quadruple(5): " + str[quadruple[5]]]
  
  // Return array
  func make_array[a, b, c] |
    return[[a, b, c]]
  ^
  
  print["make_array(1, 2, 3): " + str[make_array[1, 2, 3]]]
  
  // Return dictionary
  func make_person[name, age] |
    return[{"name": name, "age": age}]
  ^
  
  print["make_person('Alice', 30): " + str[make_person["Alice", 30]]]
  
  // Using returned values in expressions
  let sum := add[3, 4] + add[5, 6]
  print["add(3,4) + add(5,6): " + str[sum]]
  
  let nested_result := square[add[2, 3]]
  print["square(add(2,3)): " + str[nested_result]]
  
  print["\n=== FUNCTION RETURN TESTS PASSED ==="]
^

main[]