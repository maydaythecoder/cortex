// SPECIFIC ERROR TEST
// Tests specific error scenarios and edge cases

func main[] |
  print["=== SPECIFIC ERROR SCENARIOS ==="]
  
  // Scenario 1: Empty array access
  print["\nScenario 1: Empty collections"]
  let empty_arr := []
  print["Empty array length: " + str[len[empty_arr]]]
  // let empty_access := empty_arr[0]  // Would error
  
  // Scenario 2: Zero in calculations
  print["\nScenario 2: Zero handling"]
  let zero := 0
  print["0 * 100 = " + str[zero * 100]]
  print["0 + 100 = " + str[zero + 100]]
  print["100 - 0 = " + str[100 - zero]]
  // let div_zero := 100 / zero  // Would error
  
  // Scenario 3: Null comparisons
  print["\nScenario 3: Null handling"]
  let null_val := null
  print["null == null: " + str[null_val == null]]
  print["null != 0: " + str[null_val != 0]]
  
  // Scenario 4: Boolean in arithmetic
  print["\nScenario 4: Boolean operations"]
  let flag := true
  print["Boolean value: " + str[flag]]
  // let bool_math := flag + 1  // May error depending on implementation
  
  // Scenario 5: String operations
  print["\nScenario 5: String handling"]
  let str1 := "Hello"
  let str2 := "World"
  print["Concatenation: " + str1 + " " + str2]
  print["String length: " + str[len[str1]]]
  
  // Scenario 6: Nested access validation
  print["\nScenario 6: Nested access"]
  let nested := [[1, 2], [3, 4]]
  print["Valid nested access: " + str[nested[0][0]]]
  // let invalid_nested := nested[0][5]  // Would error
  
  // Scenario 7: Function return validation
  print["\nScenario 7: Function returns"]
  func returns_null[] |
    return[null]
  ^
  
  let null_result := returns_null[]
  print["Function returned null: " + str[null_result]]
  
  // Scenario 8: Loop boundaries
  print["\nScenario 8: Loop boundaries"]
  let arr := [1, 2, 3]
  let i := 0
  while [i < len[arr]] |
    print["arr[" + str[i] + "] = " + str[arr[i]]]
    i := i + 1
  ^
  
  // Scenario 9: Comparison edge cases
  print["\nScenario 9: Comparisons"]
  print["1 < 2: " + str[1 < 2]]
  print["2 < 1: " + str[2 < 1]]
  print["1 == 1: " + str[1 == 1]]
  print["1 == 2: " + str[1 == 2]]
  
  // Scenario 10: Variable shadowing
  print["\nScenario 10: Variable shadowing"]
  let x := 10
  print["Outer x: " + str[x]]
  if [true] |
    let x := 20
    print["Inner x: " + str[x]]
  ^
  print["Outer x after block: " + str[x]]
  
  print["\n=== SPECIFIC ERROR SCENARIOS COMPLETE ==="]
^

main[]